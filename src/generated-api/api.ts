/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base'

/**
 *
 * @export
 * @interface CompanyDto
 */
export interface CompanyDto {
  /**
   *
   * @type {string}
   * @memberof CompanyDto
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof CompanyDto
   */
  name?: string
}
/**
 *
 * @export
 * @interface CreateTodoListDto
 */
export interface CreateTodoListDto {
  /**
   *
   * @type {string}
   * @memberof CreateTodoListDto
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof CreateTodoListDto
   */
  description?: string
}
/**
 *
 * @export
 * @interface PersonDto
 */
export interface PersonDto {
  /**
   *
   * @type {number}
   * @memberof PersonDto
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof PersonDto
   */
  firstname?: string
  /**
   *
   * @type {string}
   * @memberof PersonDto
   */
  lastname?: string
  /**
   *
   * @type {string}
   * @memberof PersonDto
   */
  birthday?: string
}
/**
 *
 * @export
 * @interface TodoDto
 */
export interface TodoDto {
  /**
   *
   * @type {number}
   * @memberof TodoDto
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof TodoDto
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof TodoDto
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof TodoDto
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof TodoDto
   */
  dueDate?: string
  /**
   *
   * @type {boolean}
   * @memberof TodoDto
   */
  completed?: boolean
}
/**
 *
 * @export
 * @interface TodosDto
 */
export interface TodosDto {
  /**
   *
   * @type {string}
   * @memberof TodosDto
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof TodosDto
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof TodosDto
   */
  uuid?: string
  /**
   *
   * @type {Array<TodoDto>}
   * @memberof TodosDto
   */
  todoList?: Array<TodoDto>
  /**
   *
   * @type {string}
   * @memberof TodosDto
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof TodosDto
   */
  completedAt?: string
}

/**
 * CompanyControllerApi - axios parameter creator
 * @export
 */
export const CompanyControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CompanyDto} companyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCompany: async (
      companyDto: CompanyDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyDto' is not null or undefined
      assertParamExists('createCompany', 'companyDto', companyDto)
      const localVarPath = `/company/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        companyDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Returns a list of persons
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCompanies: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/companies`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CompanyControllerApi - functional programming interface
 * @export
 */
export const CompanyControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CompanyControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {CompanyDto} companyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCompany(
      companyDto: CompanyDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCompany(
        companyDto,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CompanyControllerApi.createCompany']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Returns a list of persons
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllCompanies(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<CompanyDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllCompanies(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CompanyControllerApi.getAllCompanies']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * CompanyControllerApi - factory interface
 * @export
 */
export const CompanyControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CompanyControllerApiFp(configuration)
  return {
    /**
     *
     * @param {CompanyDto} companyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCompany(
      companyDto: CompanyDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CompanyDto> {
      return localVarFp
        .createCompany(companyDto, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Returns a list of persons
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCompanies(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<CompanyDto>> {
      return localVarFp
        .getAllCompanies(options)
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * CompanyControllerApi - object-oriented interface
 * @export
 * @class CompanyControllerApi
 * @extends {BaseAPI}
 */
export class CompanyControllerApi extends BaseAPI {
  /**
   *
   * @param {CompanyDto} companyDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompanyControllerApi
   */
  public createCompany(
    companyDto: CompanyDto,
    options?: RawAxiosRequestConfig,
  ) {
    return CompanyControllerApiFp(this.configuration)
      .createCompany(companyDto, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Returns a list of persons
   * @summary Get all companies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompanyControllerApi
   */
  public getAllCompanies(options?: RawAxiosRequestConfig) {
    return CompanyControllerApiFp(this.configuration)
      .getAllCompanies(options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * HttpControllerApi - axios parameter creator
 * @export
 */
export const HttpControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} message
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    helloWorld: async (
      message: string,
      name: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'message' is not null or undefined
      assertParamExists('helloWorld', 'message', message)
      // verify required parameter 'name' is not null or undefined
      assertParamExists('helloWorld', 'name', name)
      const localVarPath = `/hello/{message}`.replace(
        `{${'message'}}`,
        encodeURIComponent(String(message)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * HttpControllerApi - functional programming interface
 * @export
 */
export const HttpControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    HttpControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} message
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async helloWorld(
      message: string,
      name: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.helloWorld(
        message,
        name,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['HttpControllerApi.helloWorld']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * HttpControllerApi - factory interface
 * @export
 */
export const HttpControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = HttpControllerApiFp(configuration)
  return {
    /**
     *
     * @param {string} message
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    helloWorld(
      message: string,
      name: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<string> {
      return localVarFp
        .helloWorld(message, name, options)
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * HttpControllerApi - object-oriented interface
 * @export
 * @class HttpControllerApi
 * @extends {BaseAPI}
 */
export class HttpControllerApi extends BaseAPI {
  /**
   *
   * @param {string} message
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HttpControllerApi
   */
  public helloWorld(
    message: string,
    name: string,
    options?: RawAxiosRequestConfig,
  ) {
    return HttpControllerApiFp(this.configuration)
      .helloWorld(message, name, options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * PersonControllerApi - axios parameter creator
 * @export
 */
export const PersonControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {PersonDto} personDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPerson: async (
      personDto: PersonDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'personDto' is not null or undefined
      assertParamExists('createPerson', 'personDto', personDto)
      const localVarPath = `/person/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        personDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Returns a list of persons
     * @summary Get all persons
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPeople: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/people`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PersonControllerApi - functional programming interface
 * @export
 */
export const PersonControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PersonControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {PersonDto} personDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPerson(
      personDto: PersonDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPerson(
        personDto,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PersonControllerApi.createPerson']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Returns a list of persons
     * @summary Get all persons
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPeople(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersonDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllPeople(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PersonControllerApi.getAllPeople']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * PersonControllerApi - factory interface
 * @export
 */
export const PersonControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PersonControllerApiFp(configuration)
  return {
    /**
     *
     * @param {PersonDto} personDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPerson(
      personDto: PersonDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PersonDto> {
      return localVarFp
        .createPerson(personDto, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Returns a list of persons
     * @summary Get all persons
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPeople(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<PersonDto>> {
      return localVarFp
        .getAllPeople(options)
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * PersonControllerApi - object-oriented interface
 * @export
 * @class PersonControllerApi
 * @extends {BaseAPI}
 */
export class PersonControllerApi extends BaseAPI {
  /**
   *
   * @param {PersonDto} personDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonControllerApi
   */
  public createPerson(personDto: PersonDto, options?: RawAxiosRequestConfig) {
    return PersonControllerApiFp(this.configuration)
      .createPerson(personDto, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Returns a list of persons
   * @summary Get all persons
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonControllerApi
   */
  public getAllPeople(options?: RawAxiosRequestConfig) {
    return PersonControllerApiFp(this.configuration)
      .getAllPeople(options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * TodoControllerApi - axios parameter creator
 * @export
 */
export const TodoControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allTodos: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/todos`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {CreateTodoListDto} createTodoListDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTodo: async (
      createTodoListDto: CreateTodoListDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createTodoListDto' is not null or undefined
      assertParamExists('createTodo', 'createTodoListDto', createTodoListDto)
      const localVarPath = `/todos`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createTodoListDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTodoById: async (
      uuid: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists('deleteTodoById', 'uuid', uuid)
      const localVarPath = `/todos/{uuid}`.replace(
        `{${'uuid'}}`,
        encodeURIComponent(String(uuid)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTodoById: async (
      uuid: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists('getTodoById', 'uuid', uuid)
      const localVarPath = `/todos/{uuid}`.replace(
        `{${'uuid'}}`,
        encodeURIComponent(String(uuid)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} uuid
     * @param {TodoDto} todoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchTodoById: async (
      uuid: string,
      todoDto: TodoDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists('patchTodoById', 'uuid', uuid)
      // verify required parameter 'todoDto' is not null or undefined
      assertParamExists('patchTodoById', 'todoDto', todoDto)
      const localVarPath = `/todos/{uuid}`.replace(
        `{${'uuid'}}`,
        encodeURIComponent(String(uuid)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        todoDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForTodoLists: async (
      query: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'query' is not null or undefined
      assertParamExists('searchForTodoLists', 'query', query)
      const localVarPath = `/todos/search/{query}`.replace(
        `{${'query'}}`,
        encodeURIComponent(String(query)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {TodosDto} todosDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTodoById: async (
      todosDto: TodosDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'todosDto' is not null or undefined
      assertParamExists('updateTodoById', 'todosDto', todosDto)
      const localVarPath = `/todos`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        todosDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TodoControllerApi - functional programming interface
 * @export
 */
export const TodoControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    TodoControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async allTodos(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<TodosDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.allTodos(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TodoControllerApi.allTodos']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {CreateTodoListDto} createTodoListDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTodo(
      createTodoListDto: CreateTodoListDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodosDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createTodo(
        createTodoListDto,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TodoControllerApi.createTodo']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTodoById(
      uuid: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodoById(
        uuid,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TodoControllerApi.deleteTodoById']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTodoById(
      uuid: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodosDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTodoById(
        uuid,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TodoControllerApi.getTodoById']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} uuid
     * @param {TodoDto} todoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchTodoById(
      uuid: string,
      todoDto: TodoDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchTodoById(
        uuid,
        todoDto,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TodoControllerApi.patchTodoById']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchForTodoLists(
      query: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<TodosDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.searchForTodoLists(query, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TodoControllerApi.searchForTodoLists']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {TodosDto} todosDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTodoById(
      todosDto: TodosDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodosDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateTodoById(
        todosDto,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TodoControllerApi.updateTodoById']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * TodoControllerApi - factory interface
 * @export
 */
export const TodoControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TodoControllerApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allTodos(options?: RawAxiosRequestConfig): AxiosPromise<Array<TodosDto>> {
      return localVarFp
        .allTodos(options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @param {CreateTodoListDto} createTodoListDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTodo(
      createTodoListDto: CreateTodoListDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TodosDto> {
      return localVarFp
        .createTodo(createTodoListDto, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTodoById(
      uuid: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<boolean> {
      return localVarFp
        .deleteTodoById(uuid, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTodoById(
      uuid: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TodosDto> {
      return localVarFp
        .getTodoById(uuid, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @param {string} uuid
     * @param {TodoDto} todoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchTodoById(
      uuid: string,
      todoDto: TodoDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<object> {
      return localVarFp
        .patchTodoById(uuid, todoDto, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForTodoLists(
      query: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<TodosDto>> {
      return localVarFp
        .searchForTodoLists(query, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @param {TodosDto} todosDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTodoById(
      todosDto: TodosDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TodosDto> {
      return localVarFp
        .updateTodoById(todosDto, options)
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * TodoControllerApi - object-oriented interface
 * @export
 * @class TodoControllerApi
 * @extends {BaseAPI}
 */
export class TodoControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoControllerApi
   */
  public allTodos(options?: RawAxiosRequestConfig) {
    return TodoControllerApiFp(this.configuration)
      .allTodos(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {CreateTodoListDto} createTodoListDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoControllerApi
   */
  public createTodo(
    createTodoListDto: CreateTodoListDto,
    options?: RawAxiosRequestConfig,
  ) {
    return TodoControllerApiFp(this.configuration)
      .createTodo(createTodoListDto, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} uuid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoControllerApi
   */
  public deleteTodoById(uuid: string, options?: RawAxiosRequestConfig) {
    return TodoControllerApiFp(this.configuration)
      .deleteTodoById(uuid, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} uuid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoControllerApi
   */
  public getTodoById(uuid: string, options?: RawAxiosRequestConfig) {
    return TodoControllerApiFp(this.configuration)
      .getTodoById(uuid, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} uuid
   * @param {TodoDto} todoDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoControllerApi
   */
  public patchTodoById(
    uuid: string,
    todoDto: TodoDto,
    options?: RawAxiosRequestConfig,
  ) {
    return TodoControllerApiFp(this.configuration)
      .patchTodoById(uuid, todoDto, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} query
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoControllerApi
   */
  public searchForTodoLists(query: string, options?: RawAxiosRequestConfig) {
    return TodoControllerApiFp(this.configuration)
      .searchForTodoLists(query, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {TodosDto} todosDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoControllerApi
   */
  public updateTodoById(todosDto: TodosDto, options?: RawAxiosRequestConfig) {
    return TodoControllerApiFp(this.configuration)
      .updateTodoById(todosDto, options)
      .then(request => request(this.axios, this.basePath))
  }
}
